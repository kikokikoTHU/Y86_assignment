	irmovl	$1, %eax	
	irmovl  $1024, %edx	
	mutex	(%edx), %eax					# Get id from addr_1024 shm_start
	irmovl 	$0, %ecx
	subl	%eax, %ecx
	jne	Receiver							# If ID == 0, Sender
Sender:	
	irmovl  $1, %ecx

LoopSender:	
	irmovl  $1056, %edx
	mrmovl  (%edx), %eax
	irmovl  $0, %ebx						# M is the value in addr_1056
	subl	%eax, %ebx
	jne	Reset								# If M == 0, Send Something
	irmovl	$1088, %edx						# V is the value in addr_1088
	irmovl  $0, %ebx						# %ebx is the tmp count
SendAct:
	mrmovl	(%edx), %eax
	iaddl	$1,	%eax
	rmmovl	%eax, (%edx)					# set target value +=1
	
	iaddl	$32, %edx
	iaddl	$1, %ebx

	rrmovl	%ecx, %edi
	subl	%ebx, %edi
	jne	SendAct

	irmovl	$1056, %edx	
	irmovl  $1, %eax
	rmmovl  %eax, (%edx)					# set M = 1
	jmp	SendWait
Reset:
	irmovl	$2, %ebx
	subl	%eax, %ebx
	jne	SendWait							# reset the signal
										
	irmovl  $0, %eax
	rmmovl  %eax, (%edx)					# set M = 0
	iaddl	$1, %ecx
SendWait:
	irmovl  $1001, %eax
	subl	%ecx, %eax						# Message end
	jne	LoopSender							# else to LoopSender
	jmp	LoopSenderEnd

LoopSenderEnd:	
	irmovl	$1, %edx						
	jmp	end

Receiver:
	irmovl  $1, %ecx						# count = 0

LoopReceiver:	
	irmovl  $1056, %edx						# M is the value in addr_1056
	mrmovl  (%edx), %eax
	irmovl  $1, %ebx	
	
	subl	%eax, %ebx
	jne	ReceiveWait							# If M == 1 receive something
	irmovl	$1088, %edx
	irmovl	$0, %ebx
ReceiveAct:
	mrmovl	(%edx), %eax
	iaddl	$1,	%eax
	rmmovl	%eax, (%edx)					# set value +=1

	iaddl	$32, %edx
	iaddl	$1, %ebx

	rrmovl	%ecx, %edi
	subl	%ebx, %edi
	jne	ReceiveAct	

	irmovl	$1056, %edx
	irmovl  $2, %eax
	rmmovl  %eax, (%edx)					# release the signal
	
	iaddl	$1, %ecx						# count += 1
	jmp	LoopReceiverLast
ReceiveWait:
LoopReceiverLast:			
	irmovl  $1001, %eax
	subl	%ecx, %eax	
	jne	LoopReceiver						# Have other message and go to LoopReceiver
	irmovl	$2, %edx						# else to LoopReceiverEnd
	jmp	end									

end:	
	irmovl	$1024, %edx
	irmovl	$0, %eax
	rmmovl	%eax, (%edx)					
